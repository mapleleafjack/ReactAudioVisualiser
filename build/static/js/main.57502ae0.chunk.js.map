{"version":3,"sources":["AudioVisualiser.js","Audio3DVisualiser.js","AudioAnalyser.js","App.js","index.js"],"names":["AudioVisualiser","props","canvas","React","createRef","width","ref","this","audioData","current","height","context","getContext","x","sliceWith","length","lineWidth","strokeSTyle","clearRect","beginPath","moveTo","y","lineTo","stroke","draw","Component","Audio3DVisualiser","low","med","hi","style","background","intensity","position","angle","scale","attach","color","opacity","transparent","AudioAnalyser","state","Uint8Array","visualiser_type","tick","bind","buttonClick","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","frequencyBinCount","source","createMediaStreamSource","audio","connect","rafId","requestAnimationFrame","cancelAnimationFrame","disconnect","getByteTimeDomainData","setState","event","onClick","className","App","toggleMicrophone","a","navigator","mediaDevices","getUserMedia","video","getTracks","forEach","track","stop","stopMicrophone","getMicrophone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57502ae0.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass AudioVisualiser extends Component {\n  constructor(props){\n    super(props);\n    this.canvas = React.createRef();\n  }\n  render(){\n    return <canvas width=\"1000px\" ref={this.canvas}/>\n  }\n\n  draw(){\n    const { audioData } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n\n    const context = canvas.getContext(\"2d\");\n    let x = 0;\n    const sliceWith = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 2;\n    context.strokeSTyle = '#000000';\n    context.clearRect(0,0,width,height);\n\n    context.beginPath();\n    context.moveTo(0, height/2);\n\n    for (const item of audioData){\n      const y = (item / 255.0) * height;\n      context.lineTo(x,y);\n      x += sliceWith;\n    }\n\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  componentDidUpdate(){\n    this.draw();\n  }\n\n}\nexport default AudioVisualiser;\n","import React, {Component} from 'react';\nimport { Canvas } from 'react-three-fiber'\nimport { OrbitControls, Stars } from 'drei'\n\nclass Audio3DVisualiser extends Component {\n    constructor(props){\n      super(props);\n      this.canvas = React.createRef();\n    }\n\n    render(){\n      const { audioData } = this.props;\n\n\n      let low = (audioData[20] / 128.0);\n      let med = (audioData[500] / 128.0);\n      let hi = (audioData[1000] / 128.0);\n\n\n      // let low_array = audioData.slice(0, 300);\n      // let medium_array = audioData.slice(300, 700);\n      // let high_array = audioData.slice(700, 1024);\n      //\n      // let low = low_array.reduce((a, b) => a + b, 0);\n      // let avg_avg = ((low / low_array.length) || 0) / 128;\n      //\n      // let med = medium_array.reduce((a, b) => a + b, 0);\n      // let med_avg = ((med / medium_array.length) || 0) / 128;\n      //\n      // let hi = high_array.reduce((a, b) => a + b, 0);\n      // let hi_avg = ((hi / high_array.length) || 0) / 128;\n\n      return <Canvas style={{background:\"black\"}}>\n          <OrbitControls />\n          <Stars />\n          <ambientLight intensity={0.5} />\n          <spotLight position={[10, 15, 10]} angle={0.3} />\n          <mesh position={[-2,0,0]} scale={[1, low, 1]}>\n            <boxBufferGeometry attach=\"geometry\" />\n            <meshBasicMaterial attach=\"material\" color=\"red\" opacity={1} transparent />\n          </mesh>\n          <mesh position={[0,0,0]} scale={[1, med, 1]}>\n            <boxBufferGeometry attach=\"geometry\" />\n            <meshBasicMaterial attach=\"material\" color=\"orange\" opacity={1} transparent />\n          </mesh>\n          <mesh position={[2,0,0]} scale={[1, hi, 1]}>\n            <boxBufferGeometry attach=\"geometry\" />\n            <meshBasicMaterial attach=\"material\" color=\"blue\" opacity={1} transparent />\n          </mesh>\n      </Canvas>\n    }\n}\n\n\nexport default Audio3DVisualiser;\n","import React, {Component} from 'react';\nimport AudioVisualiser from \"./AudioVisualiser\";\nimport Audio3DVisualiser from \"./Audio3DVisualiser\";\n\nclass AudioAnalyser extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      audioData: new Uint8Array(0),\n      visualiser_type: true\n    };\n    this.tick = this.tick.bind(this);\n\n    this.buttonClick= this.buttonClick.bind(this);\n  }\n\n  componentDidMount(){\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n\n    //gain node\n    // this.gainNode = audioContext.createGain();\n\n\n    //analyser node\n    this.analyser = this.audioContext.createAnalyser();\n    // this.analyser.fftSize = 2048;\n    // this.analyser.fftSize = 128;\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n    this.source.connect(this.analyser);\n\n\n    // this.gainNode.connect(this.audioContext.destination);\n\n    //start animation\n    this.rafId = requestAnimationFrame(this.tick)\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  tick(){\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    this.setState({audioData: this.dataArray});\n\n    // this.gainNode.gain.setValueAtTime(2, this.audioContext.currentTime);\n\n\n    //one more time!\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  buttonClick(event){\n    this.setState({visualiser_type: !this.state.visualiser_type});\n  }\n\n  render(){\n    return <div style={{height:\"96vh\"}}>\n            <button onClick={this.buttonClick} className=\"uk-button uk-button-default\"> Switch </button>\n        <br/>\n\n\n      {this.state.visualiser_type ? <AudioVisualiser audioData={this.state.audioData} /> : <Audio3DVisualiser audioData={this.state.audioData} />}\n    </div>;\n  }\n}\n\nexport default AudioAnalyser;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport AudioAnalyser from './AudioAnalyser.js';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      audio: null\n    }\n    this.toggleMicrophone = this.toggleMicrophone.bind(this);\n  }\n\n  async getMicrophone() {\n    const audio = await navigator.mediaDevices.getUserMedia({\n      audio:true,\n      video:false\n    })\n    this.setState({audio});\n  }\n\n  stopMicrophone(){\n    this.state.audio.getTracks().forEach(track => track.stop());\n    this.setState({audio:null});\n  }\n\n  toggleMicrophone(){\n    if (this.state.audio){\n      this.stopMicrophone();\n    } else {\n      this.getMicrophone();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"controls\">\n          <button className=\"uk-button uk-button-default\" onClick={this.toggleMicrophone}>\n          {this.state.audio ? \"Stop microphone\" : \"Get microphone input\"}\n          </button>\n        </div>\n        {this.state.audio ? <AudioAnalyser audio={this.state.audio}/> : \"\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}